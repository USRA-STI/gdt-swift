# CONTAINS TECHNICAL DATA/COMPUTER SOFTWARE DELIVERED TO THE U.S. GOVERNMENT WITH UNLIMITED RIGHTS
#
# Contract No.: CA 80MSFC17M0022
# Contractor Name: Universities Space Research Association
# Contractor Address: 7178 Columbia Gateway Drive, Columbia, MD 21046
#
# Copyright 2017-2022 by Universities Space Research Association (USRA). All rights reserved.
#
# Developed by: William Cleveland and Adam Goldstein
#               Universities Space Research Association
#               Science and Technology Institute
#               https://sti.usra.edu
#
# Developed by: Daniel Kocevski
#               National Aeronautics and Space Administration (NASA)
#               Marshall Space Flight Center
#               Astrophysics Branch (ST-12)
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing permissions and limitations under the
# License.
#

import os
import numpy as np
import unittest

from gdt.missions.swift.bat.headers import *


class TestSaoHeaders(unittest.TestCase):
    def setUp(self):
        self.headers = SaoHeaders()

    def test_primary(self):
        hdr = self.headers[0]
        self.assertTrue('DATE-OBS' in hdr.keys())
        self.assertTrue('TIME-OBS' in hdr.keys())
        self.assertTrue('DATE-END' in hdr.keys())
        self.assertTrue('TIME-END' in hdr.keys())
        self.assertTrue('TSTART' in hdr.keys())
        self.assertTrue('TSTOP' in hdr.keys())
        self.assertTrue('DELTAT' in hdr.keys())
        self.assertTrue('RA_NOM' in hdr.keys())
        self.assertTrue('DEC_NOM' in hdr.keys())
        self.assertTrue('TELESCOP' in hdr.keys())
        self.assertEqual(hdr['TELESCOP'], 'SWIFT')
        self.assertTrue('TIMESYS' in hdr.keys())
        self.assertEqual(hdr['TIMESYS'], 'TT')
        self.assertTrue('TIMEUNIT' in hdr.keys())
        self.assertEqual(hdr['TIMEUNIT'], 's')
        self.assertTrue('MJDREFI' in hdr.keys())
        self.assertEqual(hdr['MJDREFI'], 51910)
        self.assertTrue('MJDREFF' in hdr.keys())
        self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
        self.assertTrue('EQUINOX' in hdr.keys())
        self.assertEqual(hdr['EQUINOX'], 2000.0)
        self.assertTrue('RADECSYS' in hdr.keys())
        self.assertEqual(hdr['RADECSYS'], 'FK5')
        self.assertTrue('CREATOR' in hdr.keys())
        self.assertTrue('ORIGIN' in hdr.keys())
        self.assertEqual(hdr['ORIGIN'], 'GSFC')
        self.assertTrue('DATE' in hdr.keys())
        self.assertTrue('CHECKSUM' in hdr.keys())
        self.assertTrue('DATASUM' in hdr.keys())
        self.assertTrue('PROCVER' in hdr.keys())
        self.assertTrue('SOFTVER' in hdr.keys())
        self.assertTrue('CALDBVER' in hdr.keys())
        self.assertTrue('CLOCKAPP' in hdr.keys())
        self.assertTrue('OBS_ID' in hdr.keys())
        self.assertTrue('SEQPNUM' in hdr.keys())
        self.assertTrue('TARG_ID' in hdr.keys())
        self.assertTrue('SEG_NUM' in hdr.keys())
        self.assertTrue('OBJECT' in hdr.keys())
        self.assertTrue('RA_OBJ' in hdr.keys())
        self.assertTrue('DEC_OBJ' in hdr.keys())
        self.assertTrue('RA_PNT' in hdr.keys())
        self.assertTrue('DEC_PNT' in hdr.keys())
        self.assertTrue('PA_PNT' in hdr.keys())
        self.assertTrue('TRIGTIME' in hdr.keys())
        self.assertTrue('UTCFINIT' in hdr.keys())

    def test_prefilter(self):
        hdr = self.headers[1]
        self.assertTrue('EXTNAME' in hdr.keys())
        self.assertEqual(hdr['EXTNAME'], 'PREFILTER')
        self.assertTrue('DATE-OBS' in hdr.keys())
        self.assertTrue('TIME-OBS' in hdr.keys())
        self.assertTrue('DATE-END' in hdr.keys())
        self.assertTrue('TIME-END' in hdr.keys())
        self.assertTrue('TSTART' in hdr.keys())
        self.assertTrue('TSTOP' in hdr.keys())
        self.assertTrue('DELTAT' in hdr.keys())
        self.assertTrue('RA_NOM' in hdr.keys())
        self.assertTrue('DEC_NOM' in hdr.keys())
        self.assertTrue('TELESCOP' in hdr.keys())
        self.assertEqual(hdr['TELESCOP'], 'SWIFT')
        self.assertTrue('TIMESYS' in hdr.keys())
        self.assertEqual(hdr['TIMESYS'], 'TT')
        self.assertTrue('TIMEUNIT' in hdr.keys())
        self.assertEqual(hdr['TIMEUNIT'], 's')
        self.assertTrue('MJDREFI' in hdr.keys())
        self.assertEqual(hdr['MJDREFI'], 51910)
        self.assertTrue('MJDREFF' in hdr.keys())
        self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
        self.assertTrue('EQUINOX' in hdr.keys())
        self.assertEqual(hdr['EQUINOX'], 2000.0)
        self.assertTrue('RADECSYS' in hdr.keys())
        self.assertEqual(hdr['RADECSYS'], 'FK5')
        self.assertTrue('CREATOR' in hdr.keys())
        self.assertTrue('ORIGIN' in hdr.keys())
        self.assertEqual(hdr['ORIGIN'], 'GSFC')
        self.assertTrue('DATE' in hdr.keys())
        self.assertTrue('CHECKSUM' in hdr.keys())
        self.assertTrue('DATASUM' in hdr.keys())
        self.assertTrue('PROCVER' in hdr.keys())
        self.assertTrue('SOFTVER' in hdr.keys())
        self.assertTrue('CALDBVER' in hdr.keys())
        self.assertTrue('TIERRELA' in hdr.keys())
        self.assertEqual(hdr['TIERRELA'], 1.0E-8)
        self.assertTrue('TIERABSO' in hdr.keys())
        self.assertEqual(hdr['TIERABSO'], 1.0)
        self.assertTrue('CLOCKAPP' in hdr.keys())
        self.assertTrue('OBS_ID' in hdr.keys())
        self.assertTrue('SEQPNUM' in hdr.keys())
        self.assertTrue('TARG_ID' in hdr.keys())
        self.assertTrue('SEG_NUM' in hdr.keys())
        self.assertTrue('OBJECT' in hdr.keys())
        self.assertTrue('RA_OBJ' in hdr.keys())
        self.assertTrue('DEC_OBJ' in hdr.keys())
        self.assertTrue('RA_PNT' in hdr.keys())
        self.assertTrue('DEC_PNT' in hdr.keys())
        self.assertTrue('PA_PNT' in hdr.keys())
        self.assertTrue('TRIGTIME' in hdr.keys())
        self.assertTrue('UTCFINIT' in hdr.keys())


#
#
# class TestPhaiiHeaders(unittest.TestCase):
#     def setUp(self):
#         self.headers = PhaiiHeaders()
#
#     def test_primary(self):
#         hdr = self.headers[0]
#         hdr['INFILE01'] = ''
#         self.assertTrue('CREATOR' in hdr.keys())
#         self.assertTrue('FILETYPE' in hdr.keys())
#         self.assertTrue('FILE-VER' in hdr.keys())
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('FILENAME' in hdr.keys())
#         self.assertTrue('DATATYPE' in hdr.keys())
#         self.assertTrue('INFILE01' in hdr.keys())
#
#     def test_ebounds(self):
#         hdr = self.headers[1]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'EBOUNDS')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('HDUCLASS' in hdr.keys())
#         self.assertEqual(hdr['HDUCLASS'], 'OGIP')
#         self.assertTrue('HDUCLAS1' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS1'], 'RESPONSE')
#         self.assertTrue('HDUCLAS2' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS2'], 'EBOUNDS')
#         self.assertTrue('HDUVERS' in hdr.keys())
#         self.assertEqual(hdr['HDUVERS'], '1.2.1')
#         self.assertTrue('CHANTYPE' in hdr.keys())
#         self.assertEqual(hdr['CHANTYPE'], 'PHA')
#         self.assertTrue('FILTER' in hdr.keys())
#         self.assertEqual(hdr['FILTER'], 'none')
#         self.assertTrue('DETCHANS' in hdr.keys())
#         self.assertTrue('CH2E_VER' in hdr.keys())
#         self.assertTrue('GAIN_COR' in hdr.keys())
#
#     def test_spectrum(self):
#         hdr = self.headers[2]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'SPECTRUM')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('FILTER' in hdr.keys())
#         self.assertEqual(hdr['FILTER'], 'none')
#         self.assertTrue('AREASCAL' in hdr.keys())
#         self.assertEqual(hdr['AREASCAL'], 1.)
#         self.assertTrue('BACKFILE' in hdr.keys())
#         self.assertEqual(hdr['BACKFILE'], 'none')
#         self.assertTrue('BACKSCAL' in hdr.keys())
#         self.assertEqual(hdr['BACKSCAL'], 1.)
#         self.assertTrue('CORRFILE' in hdr.keys())
#         self.assertEqual(hdr['CORRFILE'], 'none')
#         self.assertTrue('CORRSCAL' in hdr.keys())
#         self.assertEqual(hdr['CORRSCAL'], 1.0)
#         self.assertTrue('RESPFILE' in hdr.keys())
#         self.assertEqual(hdr['RESPFILE'], 'none')
#         self.assertTrue('ANCRFILE' in hdr.keys())
#         self.assertEqual(hdr['ANCRFILE'], 'none')
#         self.assertTrue('SYS_ERR' in hdr.keys())
#         self.assertEqual(hdr['SYS_ERR'], 0.0)
#         self.assertTrue('POISSERR' in hdr.keys())
#         self.assertEqual(hdr['POISSERR'], True)
#         self.assertTrue('GROUPING' in hdr.keys())
#         self.assertEqual(hdr['GROUPING'], 0)
#         self.assertTrue('HDUCLASS' in hdr.keys())
#         self.assertEqual(hdr['HDUCLASS'], 'OGIP')
#         self.assertTrue('HDUCLAS1' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS1'], 'SPECTRUM')
#         self.assertTrue('HDUCLAS2' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS2'], 'TOTAL')
#         self.assertTrue('HDUCLAS3' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS3'], 'COUNT')
#         self.assertTrue('HDUCLAS4' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS4'], 'TYPEII')
#         self.assertTrue('HDUVERS' in hdr.keys())
#         self.assertEqual(hdr['HDUVERS'], '1.2.1')
#         self.assertTrue('CHANTYPE' in hdr.keys())
#         self.assertEqual(hdr['CHANTYPE'], 'PHA')
#         self.assertTrue('DETCHANS' in hdr.keys())
#
#     def test_gti(self):
#         hdr = self.headers[3]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'GTI')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('HDUCLASS' in hdr.keys())
#         self.assertEqual(hdr['HDUCLASS'], 'OGIP')
#         self.assertTrue('HDUCLAS1' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS1'], 'GTI')
#         self.assertTrue('HDUVERS' in hdr.keys())
#         self.assertEqual(hdr['HDUVERS'], '1.2.1')
#
#
# class TestTteTriggerHeaders(unittest.TestCase):
#     def setUp(self):
#         self.headers = TteTriggerHeaders()
#
#     def test_primary(self):
#         hdr = self.headers[0]
#         hdr['INFILE01'] = ''
#         self.assertTrue('CREATOR' in hdr.keys())
#         self.assertTrue('FILETYPE' in hdr.keys())
#         self.assertTrue('FILE-VER' in hdr.keys())
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('FILENAME' in hdr.keys())
#         self.assertTrue('DATATYPE' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('ERR_RAD' in hdr.keys())
#         self.assertTrue('INFILE01' in hdr.keys())
#
#     def test_ebounds(self):
#         hdr = self.headers[1]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'EBOUNDS')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('ERR_RAD' in hdr.keys())
#         self.assertTrue('HDUCLASS' in hdr.keys())
#         self.assertEqual(hdr['HDUCLASS'], 'OGIP')
#         self.assertTrue('HDUCLAS1' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS1'], 'RESPONSE')
#         self.assertTrue('HDUCLAS2' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS2'], 'EBOUNDS')
#         self.assertTrue('HDUVERS' in hdr.keys())
#         self.assertEqual(hdr['HDUVERS'], '1.2.1')
#         self.assertTrue('CHANTYPE' in hdr.keys())
#         self.assertEqual(hdr['CHANTYPE'], 'PHA')
#         self.assertTrue('FILTER' in hdr.keys())
#         self.assertEqual(hdr['FILTER'], 'none')
#         self.assertTrue('DETCHANS' in hdr.keys())
#         self.assertTrue('CH2E_VER' in hdr.keys())
#         self.assertTrue('GAIN_COR' in hdr.keys())
#
#     def test_spectrum(self):
#         hdr = self.headers[2]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'EVENTS')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('ERR_RAD' in hdr.keys())
#         self.assertTrue('RESPFILE' in hdr.keys())
#         self.assertTrue('EVT_DEAD' in hdr.keys())
#         self.assertEqual(hdr['EVT_DEAD'], 2.6e-6)
#         self.assertTrue('DETCHANS' in hdr.keys())
#         self.assertTrue('HDUCLASS' in hdr.keys())
#         self.assertEqual(hdr['HDUCLASS'], 'OGIP')
#         self.assertTrue('HDUCLAS1' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS1'], 'EVENTS')
#
#     def test_gti(self):
#         hdr = self.headers[3]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'GTI')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('HDUCLASS' in hdr.keys())
#         self.assertEqual(hdr['HDUCLASS'], 'OGIP')
#         self.assertTrue('HDUCLAS1' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS1'], 'GTI')
#         self.assertTrue('HDUVERS' in hdr.keys())
#         self.assertEqual(hdr['HDUVERS'], '1.2.1')
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('ERR_RAD' in hdr.keys())
#
#
# class TestTteHeaders(unittest.TestCase):
#     def setUp(self):
#         self.headers = TteHeaders()
#
#     def test_primary(self):
#         hdr = self.headers[0]
#         hdr['INFILE01'] = ''
#         self.assertTrue('CREATOR' in hdr.keys())
#         self.assertTrue('FILETYPE' in hdr.keys())
#         self.assertTrue('FILE-VER' in hdr.keys())
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('FILENAME' in hdr.keys())
#         self.assertTrue('INFILE01' in hdr.keys())
#
#     def test_ebounds(self):
#         hdr = self.headers[1]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'EBOUNDS')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('HDUCLASS' in hdr.keys())
#         self.assertEqual(hdr['HDUCLASS'], 'OGIP')
#         self.assertTrue('HDUCLAS1' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS1'], 'RESPONSE')
#         self.assertTrue('HDUCLAS2' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS2'], 'EBOUNDS')
#         self.assertTrue('HDUVERS' in hdr.keys())
#         self.assertEqual(hdr['HDUVERS'], '1.2.1')
#         self.assertTrue('CHANTYPE' in hdr.keys())
#         self.assertEqual(hdr['CHANTYPE'], 'PHA')
#         self.assertTrue('FILTER' in hdr.keys())
#         self.assertEqual(hdr['FILTER'], 'none')
#         self.assertTrue('DETCHANS' in hdr.keys())
#         self.assertTrue('CH2E_VER' in hdr.keys())
#         self.assertTrue('GAIN_COR' in hdr.keys())
#
#     def test_spectrum(self):
#         hdr = self.headers[2]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'EVENTS')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('EVT_DEAD' in hdr.keys())
#         self.assertEqual(hdr['EVT_DEAD'], 2.6e-6)
#         self.assertTrue('EVTDEDHI' in hdr.keys())
#         self.assertEqual(hdr['EVTDEDHI'], 1.0417e-5)
#         self.assertTrue('DETCHANS' in hdr.keys())
#         self.assertTrue('HDUCLASS' in hdr.keys())
#         self.assertEqual(hdr['HDUCLASS'], 'OGIP')
#         self.assertTrue('HDUCLAS1' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS1'], 'EVENTS')
#
#     def test_gti(self):
#         hdr = self.headers[3]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'GTI')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('HDUCLASS' in hdr.keys())
#         self.assertEqual(hdr['HDUCLASS'], 'OGIP')
#         self.assertTrue('HDUCLAS1' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS1'], 'GTI')
#         self.assertTrue('HDUVERS' in hdr.keys())
#         self.assertEqual(hdr['HDUVERS'], '1.2.1')
#
#
# class TestRspHeaders(unittest.TestCase):
#     def setUp(self):
#         self.headers = RspHeaders()
#
#     def test_primary(self):
#         hdr = self.headers[0]
#         self.assertTrue('CREATOR' in hdr.keys())
#         self.assertTrue('FILETYPE' in hdr.keys())
#         self.assertTrue('FILE-VER' in hdr.keys())
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('FILENAME' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('DRM_NUM' in hdr.keys())
#         self.assertTrue('DRM_TYPE' in hdr.keys())
#         self.assertTrue('DIRDRMDB' in hdr.keys())
#         self.assertTrue('DIRSCTDB' in hdr.keys())
#
#     def test_ebounds(self):
#         hdr = self.headers[1]
#         hdr['INFILE01'] = ''
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'EBOUNDS')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('FILTER' in hdr.keys())
#         self.assertEqual(hdr['FILTER'], 'none')
#         self.assertTrue('CHANTYPE' in hdr.keys())
#         self.assertEqual(hdr['CHANTYPE'], 'PHA')
#         self.assertTrue('DETCHANS' in hdr.keys())
#         self.assertTrue('INFILE01' in hdr.keys())
#         self.assertTrue('CH2E_VER' in hdr.keys())
#         self.assertTrue('GAIN_COR' in hdr.keys())
#         self.assertTrue('HDUCLASS' in hdr.keys())
#         self.assertEqual(hdr['HDUCLASS'], 'OGIP')
#         self.assertTrue('HDUVERS' in hdr.keys())
#         self.assertEqual(hdr['HDUVERS'], '1.2.1')
#         self.assertTrue('HDUCLAS1' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS1'], 'RESPONSE')
#         self.assertTrue('HDUCLAS2' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS2'], 'EBOUNDS')
#
#     def test_specresp_matrix(self):
#         hdr = self.headers[2]
#         hdr['INFILE01'] = ''
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'SPECRESP MATRIX')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('MAT_TYPE' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('RSP_NUM' in hdr.keys())
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('SRC_AZ' in hdr.keys())
#         self.assertTrue('SRC_EL' in hdr.keys())
#         self.assertTrue('GEO_AZ' in hdr.keys())
#         self.assertTrue('GEO_EL' in hdr.keys())
#         self.assertTrue('DET_ANG' in hdr.keys())
#         self.assertTrue('GEO_ANG' in hdr.keys())
#         self.assertTrue('FILTER' in hdr.keys())
#         self.assertEqual(hdr['FILTER'], 'none')
#         self.assertTrue('CHANTYPE' in hdr.keys())
#         self.assertEqual(hdr['CHANTYPE'], 'PHA')
#         self.assertTrue('NUMEBINS' in hdr.keys())
#         self.assertTrue('DETCHANS' in hdr.keys())
#         self.assertTrue('INFILE01' in hdr.keys())
#         self.assertTrue('HDUCLASS' in hdr.keys())
#         self.assertEqual(hdr['HDUCLASS'], 'OGIP')
#         self.assertTrue('HDUVERS' in hdr.keys())
#         self.assertTrue('HDUCLAS1' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS1'], 'RESPONSE')
#         self.assertTrue('HDUCLAS2' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS2'], 'RSP_MATRIX')
#
#
# class TestHealpixHeaders(unittest.TestCase):
#     def setUp(self):
#         self.headers = HealpixHeaders()
#
#     def test_primary(self):
#         hdr = self.headers[0]
#         self.assertTrue('CREATOR' in hdr.keys())
#         self.assertTrue('FILETYPE' in hdr.keys())
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('FILENAME' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('ERR_RAD' in hdr.keys())
#         self.assertTrue('THETA' in hdr.keys())
#         self.assertTrue('PHI' in hdr.keys())
#         self.assertTrue('LOC_SRC' in hdr.keys())
#         self.assertTrue('CLASS' in hdr.keys())
#         self.assertTrue('OBJ_CLAS' in hdr.keys())
#         self.assertTrue('GEO_LONG' in hdr.keys())
#         self.assertTrue('GEO_LAT' in hdr.keys())
#         self.assertTrue('RA_SCX' in hdr.keys())
#         self.assertTrue('DEC_SCX' in hdr.keys())
#         self.assertTrue('RA_SCZ' in hdr.keys())
#         self.assertTrue('DEC_SCZ' in hdr.keys())
#         self.assertTrue('LOC_VER' in hdr.keys())
#         self.assertTrue('LOC_ENRG' in hdr.keys())
#         self.assertTrue('LMETHOD' in hdr.keys())
#
#     def test_healpix(self):
#         hdr = self.headers[1]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'HEALPIX')
#         self.assertTrue('PIXTYPE' in hdr.keys())
#         self.assertEqual(hdr['PIXTYPE'], 'HEALPIX')
#         self.assertTrue('ORDERING' in hdr.keys())
#         self.assertTrue('COORDSYS' in hdr.keys())
#         self.assertTrue('NSIDE' in hdr.keys())
#         self.assertTrue('FIRSTPIX' in hdr.keys())
#         self.assertTrue('LASTPIX' in hdr.keys())
#         self.assertTrue('INDXSCHM' in hdr.keys())
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('SUN_RA' in hdr.keys())
#         self.assertTrue('SUN_DEC' in hdr.keys())
#         self.assertTrue('GEO_RA' in hdr.keys())
#         self.assertTrue('GEO_DEC' in hdr.keys())
#         self.assertTrue('GEO_RAD' in hdr.keys())
#         self.assertTrue('N0_RA' in hdr.keys())
#         self.assertTrue('N0_DEC' in hdr.keys())
#         self.assertTrue('N1_RA' in hdr.keys())
#         self.assertTrue('N1_DEC' in hdr.keys())
#         self.assertTrue('N2_RA' in hdr.keys())
#         self.assertTrue('N2_DEC' in hdr.keys())
#         self.assertTrue('N3_RA' in hdr.keys())
#         self.assertTrue('N3_DEC' in hdr.keys())
#         self.assertTrue('N4_RA' in hdr.keys())
#         self.assertTrue('N4_DEC' in hdr.keys())
#         self.assertTrue('N5_RA' in hdr.keys())
#         self.assertTrue('N5_DEC' in hdr.keys())
#         self.assertTrue('N6_RA' in hdr.keys())
#         self.assertTrue('N6_DEC' in hdr.keys())
#         self.assertTrue('N7_RA' in hdr.keys())
#         self.assertTrue('N7_DEC' in hdr.keys())
#         self.assertTrue('N8_RA' in hdr.keys())
#         self.assertTrue('N8_DEC' in hdr.keys())
#         self.assertTrue('N9_RA' in hdr.keys())
#         self.assertTrue('N9_DEC' in hdr.keys())
#         self.assertTrue('NA_RA' in hdr.keys())
#         self.assertTrue('NA_DEC' in hdr.keys())
#         self.assertTrue('NB_RA' in hdr.keys())
#         self.assertTrue('NB_DEC' in hdr.keys())
#         self.assertTrue('B0_RA' in hdr.keys())
#         self.assertTrue('B0_DEC' in hdr.keys())
#         self.assertTrue('B1_RA' in hdr.keys())
#         self.assertTrue('B1_DEC' in hdr.keys())
#
#
# class TestScatHeaders(unittest.TestCase):
#     def setUp(self):
#         self.headers = ScatHeaders()
#
#     def test_primary(self):
#         hdr = self.headers[0]
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('FILETYPE' in hdr.keys())
#         self.assertTrue('CREATOR' in hdr.keys())
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('FILENAME' in hdr.keys())
#
#     def test_detector_data(self):
#         hdr = self.headers[1]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'DETECTOR DATA')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('NUMFITS' in hdr.keys())
#
#     def test_fit_params(self):
#         hdr = self.headers[2]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'FIT PARAMS')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('NUMFITS' in hdr.keys())
#         self.assertTrue('N_PARAM' in hdr.keys())
#         self.assertTrue('FLU_LOW' in hdr.keys())
#         self.assertTrue('FLU_HIGH' in hdr.keys())
#         self.assertTrue('STATISTC' in hdr.keys())
#
#
# class TestTcatHeaders(unittest.TestCase):
#     def setUp(self):
#         self.headers = TcatHeaders()
#
#     def test_primary(self):
#         hdr = self.headers[0]
#         hdr['INFILE01'] = ''
#         self.assertTrue('CREATOR' in hdr.keys())
#         self.assertTrue('FILETYPE' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('FILENAME' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('ERR_RAD' in hdr.keys())
#         self.assertTrue('THETA' in hdr.keys())
#         self.assertTrue('PHI' in hdr.keys())
#         self.assertTrue('LOC_SRC' in hdr.keys())
#         self.assertTrue('CLASS' in hdr.keys())
#         self.assertTrue('OBJ_CLAS' in hdr.keys())
#         self.assertTrue('TRIGSCAL' in hdr.keys())
#         self.assertTrue('TRIG_ALG' in hdr.keys())
#         self.assertTrue('CHAN_LO' in hdr.keys())
#         self.assertTrue('CHAN_HI' in hdr.keys())
#         self.assertTrue('ADC_LO' in hdr.keys())
#         self.assertTrue('ADC_HI' in hdr.keys())
#         self.assertTrue('TRIG_SIG' in hdr.keys())
#         self.assertTrue('GEO_LONG' in hdr.keys())
#         self.assertTrue('GEO_LAT' in hdr.keys())
#         self.assertTrue('DET_MASK' in hdr.keys())
#         self.assertTrue('RA_SCX' in hdr.keys())
#         self.assertTrue('DEC_SCX' in hdr.keys())
#         self.assertTrue('RA_SCZ' in hdr.keys())
#         self.assertTrue('DEC_SCZ' in hdr.keys())
#         self.assertTrue('INFILE01' in hdr.keys())
#         self.assertTrue('LOC_VER' in hdr.keys())
#         self.assertTrue('LOC_ENRG' in hdr.keys())
#         self.assertTrue('RELIABLT' in hdr.keys())
#         self.assertTrue('GCN_FLAG' in hdr.keys())
#         self.assertTrue('HISTORY' in hdr.keys())
#
#
# class TestTrigdatHeaders(unittest.TestCase):
#     def setUp(self):
#         self.headers = TrigdatHeaders()
#
#     def test_primary(self):
#         hdr = self.headers[0]
#         hdr['INFILE01'] = ''
#         self.assertTrue('CREATOR' in hdr.keys())
#         self.assertTrue('FILETYPE' in hdr.keys())
#         self.assertTrue('FILE-VER' in hdr.keys())
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('DETTYPE' in hdr.keys())
#         self.assertTrue('DATATYPE' in hdr.keys())
#         self.assertTrue('FILENAME' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('ERR_RAD' in hdr.keys())
#         self.assertTrue('TRIGSCAL' in hdr.keys())
#         self.assertTrue('TRIG_ALG' in hdr.keys())
#         self.assertTrue('CHAN_LO' in hdr.keys())
#         self.assertTrue('CHAN_HI' in hdr.keys())
#         self.assertTrue('ADC_LO' in hdr.keys())
#         self.assertTrue('ADC_HI' in hdr.keys())
#         self.assertTrue('TRIG_SIG' in hdr.keys())
#         self.assertTrue('GEO_LONG' in hdr.keys())
#         self.assertTrue('GEO_LAT' in hdr.keys())
#         self.assertTrue('DET_MASK' in hdr.keys())
#         self.assertTrue('RA_SCX' in hdr.keys())
#         self.assertTrue('DEC_SCX' in hdr.keys())
#         self.assertTrue('RA_SCZ' in hdr.keys())
#         self.assertTrue('DEC_SCZ' in hdr.keys())
#         self.assertTrue('INFILE01' in hdr.keys())
#
#     def test_trigrate(self):
#         hdr = self.headers[1]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'TRIGRATE')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('DETTYPE' in hdr.keys())
#         self.assertTrue('DATATYPE' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('ERR_RAD' in hdr.keys())
#
#     def test_bckrates(self):
#         hdr = self.headers[2]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'BCKRATES')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('DETTYPE' in hdr.keys())
#         self.assertTrue('DATATYPE' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('ERR_RAD' in hdr.keys())
#
#     def test_ob_calc(self):
#         hdr = self.headers[3]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'OB_CALC')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('DETTYPE' in hdr.keys())
#         self.assertTrue('DATATYPE' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('ERR_RAD' in hdr.keys())
#
#     def test_maxrates(self):
#         hdr = self.headers[4]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'MAXRATES')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('DETTYPE' in hdr.keys())
#         self.assertTrue('DATATYPE' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('ERR_RAD' in hdr.keys())
#
#     def test_evntrate(self):
#         hdr = self.headers[5]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'EVNTRATE')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('DETTYPE' in hdr.keys())
#         self.assertTrue('DATATYPE' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('ERR_RAD' in hdr.keys())
#
#
# class TestPosHistHeaders(unittest.TestCase):
#     def setUp(self):
#         self.headers = PosHistHeaders()
#
#     def test_primary(self):
#         hdr = self.headers[0]
#         hdr['INFILE01'] = ''
#         self.assertTrue('CREATOR' in hdr.keys())
#         self.assertTrue('FILETYPE' in hdr.keys())
#         self.assertTrue('FILE-VER' in hdr.keys())
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('FILENAME' in hdr.keys())
#         self.assertTrue('INFILE01' in hdr.keys())
#
#     def test_glast_pos_hist(self):
#         hdr = self.headers[1]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'GLAST POS HIST')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('EXTVER' in hdr.keys())
#
#
# class TestPhaHeaders(unittest.TestCase):
#     def setUp(self):
#         self.headers = PhaHeaders()
#
#     def test_primary(self):
#         hdr = self.headers[0]
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('CREATOR' in hdr.keys())
#         self.assertTrue('FILENAME' in hdr.keys())
#         self.assertTrue('FILETYPE' in hdr.keys())
#         self.assertTrue('FILE-VER' in hdr.keys())
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#
#     def test_ebounds(self):
#         hdr = self.headers[1]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'EBOUNDS')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('FILTER' in hdr.keys())
#         self.assertEqual(hdr['FILTER'], 'none')
#         self.assertTrue('CHANTYPE' in hdr.keys())
#         self.assertEqual(hdr['CHANTYPE'], 'PHA')
#         self.assertTrue('DETCHANS' in hdr.keys())
#         self.assertTrue('HDUCLASS' in hdr.keys())
#         self.assertEqual(hdr['HDUCLASS'], 'OGIP')
#         self.assertTrue('HDUCLAS1' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS1'], 'RESPONSE')
#         self.assertTrue('HDUCLAS2' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS2'], 'EBOUNDS')
#         self.assertTrue('HDUVERS' in hdr.keys())
#         self.assertEqual(hdr['HDUVERS'], '1.2.1')
#
#     def test_spectrum(self):
#         hdr = self.headers[2]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'SPECTRUM')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('FILTER' in hdr.keys())
#         self.assertEqual(hdr['FILTER'], 'none')
#         self.assertTrue('EXPOSURE' in hdr.keys())
#         self.assertTrue('BACKFILE' in hdr.keys())
#         self.assertEqual(hdr['BACKFILE'], 'none')
#         self.assertTrue('BACKSCAL' in hdr.keys())
#         self.assertEqual(hdr['BACKSCAL'], 1.)
#         self.assertTrue('CORRFILE' in hdr.keys())
#         self.assertEqual(hdr['CORRFILE'], 'none')
#         self.assertTrue('CORRSCAL' in hdr.keys())
#         self.assertEqual(hdr['CORRSCAL'], 1.0)
#         self.assertTrue('RESPFILE' in hdr.keys())
#         self.assertEqual(hdr['RESPFILE'], 'none')
#         self.assertTrue('ANCRFILE' in hdr.keys())
#         self.assertEqual(hdr['ANCRFILE'], 'none')
#         self.assertTrue('AREASCAL' in hdr.keys())
#         self.assertEqual(hdr['AREASCAL'], 1.)
#         self.assertTrue('POISSERR' in hdr.keys())
#         self.assertEqual(hdr['POISSERR'], True)
#         self.assertTrue('SYS_ERR' in hdr.keys())
#         self.assertEqual(hdr['SYS_ERR'], 0.0)
#         self.assertTrue('GROUPING' in hdr.keys())
#         self.assertEqual(hdr['GROUPING'], 0)
#         self.assertTrue('HDUCLASS' in hdr.keys())
#         self.assertEqual(hdr['HDUCLASS'], 'OGIP')
#         self.assertTrue('HDUCLAS1' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS1'], 'SPECTRUM')
#         self.assertTrue('HDUCLAS2' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS2'], 'TOTAL')
#         self.assertTrue('HDUCLAS3' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS3'], 'RATE')
#         self.assertTrue('HDUCLAS4' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS4'], 'TYPEI')
#         self.assertTrue('HDUVERS' in hdr.keys())
#         self.assertEqual(hdr['HDUVERS'], '1.2.1')
#         self.assertTrue('CHANTYPE' in hdr.keys())
#         self.assertEqual(hdr['CHANTYPE'], 'PHA')
#         self.assertTrue('DETCHANS' in hdr.keys())
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('EXTVER' in hdr.keys())
#
#     def test_gti(self):
#         hdr = self.headers[3]
#         self.assertTrue('EXTNAME' in hdr.keys())
#         self.assertEqual(hdr['EXTNAME'], 'GTI')
#         self.assertTrue('DATE' in hdr.keys())
#         self.assertTrue('ORIGIN' in hdr.keys())
#         self.assertEqual(hdr['ORIGIN'], 'GIOC')
#         self.assertTrue('TELESCOP' in hdr.keys())
#         self.assertEqual(hdr['TELESCOP'], 'GLAST')
#         self.assertTrue('INSTRUME' in hdr.keys())
#         self.assertEqual(hdr['INSTRUME'], 'GBM')
#         self.assertTrue('OBSERVER' in hdr.keys())
#         self.assertEqual(hdr['OBSERVER'], 'Meegan')
#         self.assertTrue('DETNAM' in hdr.keys())
#         self.assertTrue('HDUCLASS' in hdr.keys())
#         self.assertEqual(hdr['HDUCLASS'], 'OGIP')
#         self.assertTrue('HDUCLAS1' in hdr.keys())
#         self.assertEqual(hdr['HDUCLAS1'], 'GTI')
#         self.assertTrue('HDUVERS' in hdr.keys())
#         self.assertEqual(hdr['HDUVERS'], '1.2.1')
#         self.assertTrue('OBJECT' in hdr.keys())
#         self.assertTrue('RADECSYS' in hdr.keys())
#         self.assertEqual(hdr['RADECSYS'], 'FK5')
#         self.assertTrue('EQUINOX' in hdr.keys())
#         self.assertEqual(hdr['EQUINOX'], 2000.0)
#         self.assertTrue('RA_OBJ' in hdr.keys())
#         self.assertTrue('DEC_OBJ' in hdr.keys())
#         self.assertTrue('TRIGTIME' in hdr.keys())
#         self.assertTrue('TSTART' in hdr.keys())
#         self.assertTrue('TSTOP' in hdr.keys())
#         self.assertTrue('DATE-OBS' in hdr.keys())
#         self.assertTrue('DATE-END' in hdr.keys())
#         self.assertTrue('MJDREFI' in hdr.keys())
#         self.assertEqual(hdr['MJDREFI'], 51910)
#         self.assertTrue('MJDREFF' in hdr.keys())
#         self.assertEqual(hdr['MJDREFF'], '7.428703703703703e-4')
#         self.assertTrue('TIMESYS' in hdr.keys())
#         self.assertEqual(hdr['TIMESYS'], 'TT')
#         self.assertTrue('TIMEUNIT' in hdr.keys())
#         self.assertEqual(hdr['TIMEUNIT'], 's')
#         self.assertTrue('EXTVER' in hdr.keys())
